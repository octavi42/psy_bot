generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum UserRole {
    user
    member
    contributor
    admin
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt @default(now())
    role          UserRole @default(user)

    chats         Chat[]
    objects       Objects[]
    accounts      Account[]
    sessions      Session[]
    saveState     SavingProcess?
}


enum SaveState {
    saved
    saving
    unknown
}

model SavingProcess {
    id              String    @id @default(cuid())
    
    state           SaveState @default(unknown)
    message         String?   @db.Text
    userId          String    @unique

    user            User      @relation(fields: [userId], references: [id])
}


model Chat {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    createdByUserId String
    name            String

    createdByUser   User       @relation(fields: [createdByUserId], references: [id])
    messages        Messages[]
}

enum ChatRole {
    user
    assistant
}


model Messages {
    id        String   @id @default(cuid())
    chatId    String
    text      String   @db.Text
    role      ChatRole @default(user)
    createdAt DateTime @default(now())

    chat      Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}


model Objects {
    id String @id @default(cuid())

    createdByUserId String
    title           String
    description     String?
    transcription   String? @db.Text
    type            String
    
    createdByUser   User       @relation(fields: [createdByUserId], references: [id])
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
