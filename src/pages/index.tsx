import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";

export default function Home() {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const { data: sessionData, status } = useSession();

  console.log(sessionData?.user);

  if (status === 'loading') {
    // The session data is still loading, you can show a loading state here.
    // return <div>Loading...</div>;
    console.log('loading');
    
  }

  if (status === 'authenticated') {
    // The user is authenticated, you can access the session data.
    console.log('Session Data:', sessionData);
    // printing the user id
    // You can access user data like session.user.email or session.user.name
  }


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <h1>Hello world</h1>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData, status } = useSession();

  console.log("determining status");
  

  if (status === 'loading') {
    // The session data is still loading, you can show a loading state here.
    // return <div>Loading...</div>;
    console.log('loading');
    
  }

  if (status === 'authenticated') {
    // The user is authenticated, you can access the session data.
    console.log('Session Data:', sessionData);
    // You can access user data like session.user.email or session.user.name
  }

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
